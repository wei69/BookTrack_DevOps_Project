function cov_2kjwxtcxvs(){var path="C:\\Users\\wei long\\Documents\\devoppart2\\BookTrack_DevOps_Project\\models\\book.js";var hash="5152c1e71cf6f9c1efc678cf94bc952df7aa538a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\wei long\\Documents\\devoppart2\\BookTrack_DevOps_Project\\models\\book.js",statementMap:{"0":{start:{line:1,column:26},end:{line:1,column:45}},"1":{start:{line:4,column:19},end:{line:21,column:2}},"2":{start:{line:24,column:0},end:{line:24,column:44}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5152c1e71cf6f9c1efc678cf94bc952df7aa538a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2kjwxtcxvs=function(){return actualCoverage;};}return actualCoverage;}cov_2kjwxtcxvs();const{Schema,model}=(cov_2kjwxtcxvs().s[0]++,require('mongoose'));// Define a schema for the Book model, which outlines the structure of each book document in the database
const BookSchema=(cov_2kjwxtcxvs().s[1]++,new Schema({// Title of the book (required field)
title:{type:String,required:true},// Author of the book (required field)
author:{type:String,required:true},// ISBN of the book, must be unique (required field)
isbn:{type:String,required:true,unique:true},// Genre or category of the book (required field)
genre:{type:String,required:true},// Number of available copies, cannot be less than 0 (required field)
availableCopies:{type:Number,required:true,min:0},// Base64 encoded image of the book cover (required field)
image:{type:String,required:true}},{// Add timestamps for created and updated times
timestamps:true}));// Export the Book model based on the defined schema
cov_2kjwxtcxvs().s[2]++;module.exports=model('Books',BookSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmtqd3h0Y3h2cyIsImFjdHVhbENvdmVyYWdlIiwiU2NoZW1hIiwibW9kZWwiLCJzIiwicmVxdWlyZSIsIkJvb2tTY2hlbWEiLCJ0aXRsZSIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImF1dGhvciIsImlzYm4iLCJ1bmlxdWUiLCJnZW5yZSIsImF2YWlsYWJsZUNvcGllcyIsIk51bWJlciIsIm1pbiIsImltYWdlIiwidGltZXN0YW1wcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJib29rLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgU2NoZW1hLCBtb2RlbCB9ID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuXHJcbi8vIERlZmluZSBhIHNjaGVtYSBmb3IgdGhlIEJvb2sgbW9kZWwsIHdoaWNoIG91dGxpbmVzIHRoZSBzdHJ1Y3R1cmUgb2YgZWFjaCBib29rIGRvY3VtZW50IGluIHRoZSBkYXRhYmFzZVxyXG5jb25zdCBCb29rU2NoZW1hID0gbmV3IFNjaGVtYSh7XHJcbiAgICAvLyBUaXRsZSBvZiB0aGUgYm9vayAocmVxdWlyZWQgZmllbGQpXHJcbiAgICB0aXRsZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgICAvLyBBdXRob3Igb2YgdGhlIGJvb2sgKHJlcXVpcmVkIGZpZWxkKVxyXG4gICAgYXV0aG9yOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcclxuICAgIC8vIElTQk4gb2YgdGhlIGJvb2ssIG11c3QgYmUgdW5pcXVlIChyZXF1aXJlZCBmaWVsZClcclxuICAgIGlzYm46IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSwgdW5pcXVlOiB0cnVlIH0sXHJcbiAgICAvLyBHZW5yZSBvciBjYXRlZ29yeSBvZiB0aGUgYm9vayAocmVxdWlyZWQgZmllbGQpXHJcbiAgICBnZW5yZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgICAvLyBOdW1iZXIgb2YgYXZhaWxhYmxlIGNvcGllcywgY2Fubm90IGJlIGxlc3MgdGhhbiAwIChyZXF1aXJlZCBmaWVsZClcclxuICAgIGF2YWlsYWJsZUNvcGllczogeyB0eXBlOiBOdW1iZXIsIHJlcXVpcmVkOiB0cnVlLCBtaW46IDAgfSxcclxuICAgIC8vIEJhc2U2NCBlbmNvZGVkIGltYWdlIG9mIHRoZSBib29rIGNvdmVyIChyZXF1aXJlZCBmaWVsZClcclxuICAgIGltYWdlOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcclxufSwgXHJcbnsgXHJcbiAgICAvLyBBZGQgdGltZXN0YW1wcyBmb3IgY3JlYXRlZCBhbmQgdXBkYXRlZCB0aW1lc1xyXG4gICAgdGltZXN0YW1wczogdHJ1ZSBcclxufSk7XHJcblxyXG4vLyBFeHBvcnQgdGhlIEJvb2sgbW9kZWwgYmFzZWQgb24gdGhlIGRlZmluZWQgc2NoZW1hXHJcbm1vZHVsZS5leHBvcnRzID0gbW9kZWwoJ0Jvb2tzJywgQm9va1NjaGVtYSk7XHJcbiJdLCJtYXBwaW5ncyI6IjYwQkFlWTtBQUFBQSxjQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGNBQUEsR0FmWixLQUFNLENBQUVFLE1BQU0sQ0FBRUMsS0FBTSxDQUFDLEVBQUFILGNBQUEsR0FBQUksQ0FBQSxNQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBRTdDO0FBQ0EsS0FBTSxDQUFBQyxVQUFVLEVBQUFOLGNBQUEsR0FBQUksQ0FBQSxNQUFHLEdBQUksQ0FBQUYsTUFBTSxDQUFDLENBQzFCO0FBQ0FLLEtBQUssQ0FBRSxDQUFFQyxJQUFJLENBQUVDLE1BQU0sQ0FBRUMsUUFBUSxDQUFFLElBQUssQ0FBQyxDQUN2QztBQUNBQyxNQUFNLENBQUUsQ0FBRUgsSUFBSSxDQUFFQyxNQUFNLENBQUVDLFFBQVEsQ0FBRSxJQUFLLENBQUMsQ0FDeEM7QUFDQUUsSUFBSSxDQUFFLENBQUVKLElBQUksQ0FBRUMsTUFBTSxDQUFFQyxRQUFRLENBQUUsSUFBSSxDQUFFRyxNQUFNLENBQUUsSUFBSyxDQUFDLENBQ3BEO0FBQ0FDLEtBQUssQ0FBRSxDQUFFTixJQUFJLENBQUVDLE1BQU0sQ0FBRUMsUUFBUSxDQUFFLElBQUssQ0FBQyxDQUN2QztBQUNBSyxlQUFlLENBQUUsQ0FBRVAsSUFBSSxDQUFFUSxNQUFNLENBQUVOLFFBQVEsQ0FBRSxJQUFJLENBQUVPLEdBQUcsQ0FBRSxDQUFFLENBQUMsQ0FDekQ7QUFDQUMsS0FBSyxDQUFFLENBQUVWLElBQUksQ0FBRUMsTUFBTSxDQUFFQyxRQUFRLENBQUUsSUFBSyxDQUMxQyxDQUFDLENBQ0QsQ0FDSTtBQUNBUyxVQUFVLENBQUUsSUFDaEIsQ0FBQyxDQUFDLEVBRUY7QUFBQW5CLGNBQUEsR0FBQUksQ0FBQSxNQUNBZ0IsTUFBTSxDQUFDQyxPQUFPLENBQUdsQixLQUFLLENBQUMsT0FBTyxDQUFFRyxVQUFVLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=